/*!
@file
Defines `boost::hana::Lazy`.

@copyright Louis Dionne 2014
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)
 */

#ifndef BOOST_HANA_LAZY_HPP
#define BOOST_HANA_LAZY_HPP

#include <boost/hana/fwd/lazy.hpp>

#include <boost/hana/applicative.hpp>
#include <boost/hana/config.hpp>
#include <boost/hana/core/operators.hpp>
#include <boost/hana/detail/closure.hpp>
#include <boost/hana/detail/create.hpp>
#include <boost/hana/detail/std/forward.hpp>
#include <boost/hana/detail/std/move.hpp>
#include <boost/hana/functional/compose.hpp>
#include <boost/hana/functional/id.hpp>
#include <boost/hana/functor.hpp>
#include <boost/hana/monad.hpp>


namespace boost { namespace hana {
    //////////////////////////////////////////////////////////////////////////
    // eval
    //////////////////////////////////////////////////////////////////////////
    // Remove warnings generated by poor confused Doxygen
    //! @cond
    template <typename Lx>
    constexpr decltype(auto) _eval::operator()(Lx&& lx) const {
        return detail::std::forward<Lx>(lx).eval_impl(id);
    }
    //! @endcond

    //////////////////////////////////////////////////////////////////////////
    // lazy
    //////////////////////////////////////////////////////////////////////////
    template <typename F, typename ...X>
    struct _lazy_call<F, detail::closure_impl<X...>> {
        F f;
        detail::closure_impl<X...> x;
        struct hana { using datatype = Lazy; };

        template <typename Id>
        constexpr decltype(auto) eval_impl(Id _) const&
        { return _(f)(static_cast<X const&>(x).get...); }

#ifndef BOOST_HANA_CONFIG_CONSTEXPR_MEMBER_FUNCTION_IS_CONST
        template <typename Id>
        constexpr decltype(auto) eval_impl(Id _) &
        { return _(f)(static_cast<X&>(x).get...); }
#endif

        template <typename Id>
        constexpr decltype(auto) eval_impl(Id _) &&
        { return _(detail::std::move(f))(static_cast<X&&>(x).get...); }
    };

    template <typename X, typename>
    struct _lazy {
        X x;
        struct hana { using datatype = Lazy; };

        template <typename Id>
        constexpr decltype(auto) eval_impl(Id const&) const&
        { return x; }

#ifndef BOOST_HANA_CONFIG_CONSTEXPR_MEMBER_FUNCTION_IS_CONST
        template <typename Id>
        constexpr decltype(auto) eval_impl(Id const&) &
        { return x; }
#endif

        template <typename Id>
        constexpr decltype(auto) eval_impl(Id const&) &&
        { return detail::std::move(x); }


        template <typename ...Xs>
        constexpr decltype(auto) operator()(Xs&& ...xs) const& {
            return detail::create<_lazy_call>{}(
                x, detail::create<detail::closure>{}(
                    detail::std::forward<Xs>(xs)...
                )
            );
        }

#ifndef BOOST_HANA_CONFIG_CONSTEXPR_MEMBER_FUNCTION_IS_CONST
        template <typename ...Xs>
        constexpr decltype(auto) operator()(Xs&& ...xs) & {
            return detail::create<_lazy_call>{}(
                x, detail::create<detail::closure>{}(
                    detail::std::forward<Xs>(xs)...
                )
            );
        }
#endif

        template <typename ...Xs>
        constexpr decltype(auto) operator()(Xs&& ...xs) && {
            return detail::create<_lazy_call>{}(
                detail::std::move(x), detail::create<detail::closure>{}(
                    detail::std::forward<Xs>(xs)...
                )
            );
        }
    };

    //////////////////////////////////////////////////////////////////////////
    // Operators
    //////////////////////////////////////////////////////////////////////////
    namespace operators {
        template <>
        struct of<Lazy>
            : operators::of<Monad>
        { };
    }

    //////////////////////////////////////////////////////////////////////////
    // Functor
    //////////////////////////////////////////////////////////////////////////
    template <>
    struct transform_impl<Lazy> {
        template <typename LX, typename F>
        static constexpr decltype(auto) apply(LX&& lx, F&& f) {
            return hana::ap(hana::lazy(detail::std::forward<F>(f)),
                                       detail::std::forward<LX>(lx));
        }
    };

    //////////////////////////////////////////////////////////////////////////
    // Applicative
    //////////////////////////////////////////////////////////////////////////
    template <>
    struct lift_impl<Lazy> {
        template <typename X>
        static constexpr decltype(auto) apply(X&& x) {
            return hana::lazy(detail::std::forward<X>(x));
        }
    };

    template <>
    struct ap_impl<Lazy> {
        template <typename Lf, typename Lx>
        struct ap_result {
            Lf lf; Lx lx;
            struct hana { using datatype = Lazy; };

            template <typename Id>
            constexpr decltype(auto) eval_impl(Id _) const&
            { return _(eval)(lf)(_(eval)(lx)); }

#ifndef BOOST_HANA_CONFIG_CONSTEXPR_MEMBER_FUNCTION_IS_CONST
            template <typename Id>
            constexpr decltype(auto) eval_impl(Id _) &
            { return _(eval)(lf)(_(eval)(lx)); }
#endif

            template <typename Id>
            constexpr decltype(auto) eval_impl(Id _) && {
                return _(eval)(detail::std::move(lf))(
                    _(eval)(detail::std::move(lx))
                );
            }
        };

        template <typename F, typename X>
        static constexpr decltype(auto) apply(F&& f, X&& x) {
            return detail::create<ap_result>{}(
                detail::std::forward<F>(f), detail::std::forward<X>(x)
            );
        }
    };

    //////////////////////////////////////////////////////////////////////////
    // Monad
    //////////////////////////////////////////////////////////////////////////
    template <>
    struct flatten_impl<Lazy> {
        template <typename LLX>
        static constexpr decltype(auto) apply(LLX&& llx) {
            return hana::lazy(hana::compose(eval, eval))(
                detail::std::forward<LLX>(llx)
            );
        }
    };
}} // end namespace boost::hana

#endif // !BOOST_HANA_LAZY_HPP
